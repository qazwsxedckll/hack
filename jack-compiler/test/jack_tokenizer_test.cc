#include "jack_tokenizer.h"

#include <gtest/gtest.h>
#include <queue>

using std::queue;

TEST(TokenizerTest, ValidIdentifier)
{
    EXPECT_TRUE(Jacktokenizer::ValidIdentifier("test123_"));
    EXPECT_TRUE(Jacktokenizer::ValidIdentifier("_test123"));
    EXPECT_FALSE(Jacktokenizer::ValidIdentifier("123test_"));
    EXPECT_FALSE(Jacktokenizer::ValidIdentifier("test123$_"));
}

TEST(TokenizerTest, Advance)
{
    Jacktokenizer tokenizer("Square/SquareGame.jack");
    queue<string> tokens;
    tokens.push("class");
    tokens.push("SquareGame");
    tokens.push("{");
    tokens.push("field");
    tokens.push("Square");
    tokens.push("square");
    tokens.push(";");
    tokens.push("field");
    tokens.push("int");
    tokens.push("direction");
    tokens.push(";");
    tokens.push("constructor");
    tokens.push("SquareGame");
    tokens.push("new");
    tokens.push("(");
    tokens.push(")");
    tokens.push("{");
    tokens.push("let");
    tokens.push("square");
    tokens.push("=");
    tokens.push("Square");
    tokens.push(".");
    tokens.push("new");
    tokens.push("(");
    tokens.push("0");
    tokens.push(",");
    tokens.push("0");
    tokens.push(",");
    tokens.push("30");
    tokens.push(")");
    tokens.push(";");
    tokens.push("let");
    tokens.push("direction");
    tokens.push("=");
    tokens.push("0");
    tokens.push(";");
    tokens.push("return");
    tokens.push("this");
    tokens.push(";");
    tokens.push("}");
    tokens.push("method");
    tokens.push("void");
    tokens.push("dispose");
    tokens.push("(");
    tokens.push(")");
    tokens.push("{");
    tokens.push("do");
    tokens.push("square");
    tokens.push(".");
    tokens.push("dispose");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("do");
    tokens.push("Memory");
    tokens.push(".");
    tokens.push("deAlloc");
    tokens.push("(");
    tokens.push("this");
    tokens.push(")");
    tokens.push(";");
    tokens.push("return");
    tokens.push(";");
    tokens.push("}");
    tokens.push("method");
    tokens.push("void");
    tokens.push("moveSquare");
    tokens.push("(");
    tokens.push(")");
    tokens.push("{");
    tokens.push("if");
    tokens.push("(");
    tokens.push("direction");
    tokens.push("=");
    tokens.push("1");
    tokens.push(")");
    tokens.push("{");
    tokens.push("do");
    tokens.push("square");
    tokens.push(".");
    tokens.push("moveUp");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("direction");
    tokens.push("=");
    tokens.push("2");
    tokens.push(")");
    tokens.push("{");
    tokens.push("do");
    tokens.push("square");
    tokens.push(".");
    tokens.push("moveDown");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("direction");
    tokens.push("=");
    tokens.push("3");
    tokens.push(")");
    tokens.push("{");
    tokens.push("do");
    tokens.push("square");
    tokens.push(".");
    tokens.push("moveLeft");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("direction");
    tokens.push("=");
    tokens.push("4");
    tokens.push(")");
    tokens.push("{");
    tokens.push("do");
    tokens.push("square");
    tokens.push(".");
    tokens.push("moveRight");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("}");
    tokens.push("do");
    tokens.push("Sys");
    tokens.push(".");
    tokens.push("wait");
    tokens.push("(");
    tokens.push("5");
    tokens.push(")");
    tokens.push(";");
    tokens.push("return");
    tokens.push(";");
    tokens.push("}");
    tokens.push("method");
    tokens.push("void");
    tokens.push("run");
    tokens.push("(");
    tokens.push(")");
    tokens.push("{");
    tokens.push("var");
    tokens.push("char");
    tokens.push("key");
    tokens.push(";");
    tokens.push("var");
    tokens.push("boolean");
    tokens.push("exit");
    tokens.push(";");
    tokens.push("let");
    tokens.push("exit");
    tokens.push("=");
    tokens.push("false");
    tokens.push(";");
    tokens.push("while");
    tokens.push("(");
    tokens.push("~");
    tokens.push("exit");
    tokens.push(")");
    tokens.push("{");
    tokens.push("while");
    tokens.push("(");
    tokens.push("key");
    tokens.push("=");
    tokens.push("0");
    tokens.push(")");
    tokens.push("{");
    tokens.push("let");
    tokens.push("key");
    tokens.push("=");
    tokens.push("Keyboard");
    tokens.push(".");
    tokens.push("keyPressed");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("do");
    tokens.push("moveSquare");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("key");
    tokens.push("=");
    tokens.push("81");
    tokens.push(")");
    tokens.push("{");
    tokens.push("let");
    tokens.push("exit");
    tokens.push("=");
    tokens.push("true");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("key");
    tokens.push("=");
    tokens.push("90");
    tokens.push(")");
    tokens.push("{");
    tokens.push("do");
    tokens.push("square");
    tokens.push(".");
    tokens.push("decSize");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("key");
    tokens.push("=");
    tokens.push("88");
    tokens.push(")");
    tokens.push("{");
    tokens.push("do");
    tokens.push("square");
    tokens.push(".");
    tokens.push("incSize");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("key");
    tokens.push("=");
    tokens.push("131");
    tokens.push(")");
    tokens.push("{");
    tokens.push("let");
    tokens.push("direction");
    tokens.push("=");
    tokens.push("1");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("key");
    tokens.push("=");
    tokens.push("133");
    tokens.push(")");
    tokens.push("{");
    tokens.push("let");
    tokens.push("direction");
    tokens.push("=");
    tokens.push("2");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("key");
    tokens.push("=");
    tokens.push("130");
    tokens.push(")");
    tokens.push("{");
    tokens.push("let");
    tokens.push("direction");
    tokens.push("=");
    tokens.push("3");
    tokens.push(";");
    tokens.push("}");
    tokens.push("if");
    tokens.push("(");
    tokens.push("key");
    tokens.push("=");
    tokens.push("132");
    tokens.push(")");
    tokens.push("{");
    tokens.push("let");
    tokens.push("direction");
    tokens.push("=");
    tokens.push("4");
    tokens.push(";");
    tokens.push("}");
    tokens.push("while");
    tokens.push("(");
    tokens.push("~");
    tokens.push("(");
    tokens.push("key");
    tokens.push("=");
    tokens.push("0");
    tokens.push(")");
    tokens.push(")");
    tokens.push("{");
    tokens.push("let");
    tokens.push("key");
    tokens.push("=");
    tokens.push("Keyboard");
    tokens.push(".");
    tokens.push("keyPressed");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("do");
    tokens.push("moveSquare");
    tokens.push("(");
    tokens.push(")");
    tokens.push(";");
    tokens.push("}");
    tokens.push("}");
    tokens.push("return");
    tokens.push(";");
    tokens.push("}");
    tokens.push("}");
    while (tokenizer.hasMoreTokens() && !tokens.empty())
    {
        tokenizer.advance();
        EXPECT_EQ(tokenizer.current_token(), tokens.front());
        tokens.pop();
    }
}